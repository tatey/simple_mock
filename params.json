{"name":"Simple mock","body":"# SimpleMock\r\n\r\n[![Build Status](https://secure.travis-ci.org/tatey/simple_mock.png?branch=master)](http://travis-ci.org/tatey/simple_mock)\r\n\r\nA fast, tiny (81 lines) hybrid mocking library that supports classical and partial mocking. Partial mocking mixes classical mocking with real objects. There's no monkey patching `Object` or copying. Mock objects are isolated leaving real objects completely untainted. Plays nicely with MiniTest and [RSpec](http://rspec.info/). The interface is 100% compatible with [MiniTest::Mock](https://github.com/seattlerb/minitest) so there is nothing new to learn. SimpleMock's one and only dependancy is Ruby 1.9.2 or greater.\r\n\r\n## Installation\r\n\r\nAdd this to your project's Gemfile and run `$ bundle`.\r\n\r\n``` ruby\r\ngem 'simple_mock', :group => :test\r\n```\r\n\r\nSimpleMock is isolated so there is no need to set require to false.\r\n\r\n## Usage\r\n\r\n### Classical Mocking\r\n\r\nA new SimpleMock object behaves identically to MiniTest::Mock.\r\n\r\n``` ruby\r\nmock_model = SimpleMock.new\r\nmock_model.expect :valid?, true\r\n\r\nmock_model.valid? # => true\r\n\r\nmock_model.verify # => true\r\n```\r\n\r\n### Partial Mocking\r\n\r\nPass an object to mix expectations with the real object's original behaviour.\r\n\r\n``` ruby\r\nclass Post < ActiveRecord::Base\r\n  validates :title, :presence => true\r\nend\r\n\r\nreal_model = Post.new\r\nmock_model = SimpleMock.new real_model\r\nmock_model.expect :valid?, true\r\n\r\nmock_model.valid? # => true\r\nmock_model.create # => true\r\n\r\nmock_model.verify # => true\r\n```\r\n\r\nThis is done with delegation, avoiding monkey patching and copying. The real object is completely untainted.\r\n\r\n``` ruby\r\nmock_model.valid  # => true\r\nreal_model.valid? # => false\r\n\r\nreal_model.object_id == mock_model.__getobj__.object_id # => true\r\nreal_model.object_id != mock_model.object_id            # => true\r\n```\r\n\r\nMore documentation is available at [rubydoc.info](http://rubydoc.info/gems/simple_mock/frames).\r\n\r\n## Performance\r\n\r\nSimpleMock is fast. In [this benchmark](https://gist.github.com/1871840) we create an array, set an expectation and call that method 10,000 times.\r\n\r\n``` plain\r\n             user       system     total      real\r\nmocha:       0.000000   0.000000   0.000000   (0.000279)\r\nsimple_mock: 0.000000   0.000000   0.000000   (0.000057)\r\n```\r\n\r\n## Caveats\r\n\r\nLike MiniTest::Mock, `#expect` and `#verify` are reserved methods. Expectations should not be defined on real objects which implement these methods. As an alternative, consider creating an anonymous class which inherits from SimpleDelegator.\r\n\r\n``` ruby\r\nmock_class = Class.new SimpleDelegator do\r\n  def verify *args\r\n    true\r\n  end\r\nend\r\nmock_instance = mock_class.new MyRealClass.new\r\nmock_instance.verify # => true\r\n```\r\n\r\nSimpleMock does something similar to this under the hood.\r\n\r\n## Copyright\r\n\r\nCopyright Â© 2012 Tate Johnson. SimpleMock is released under the MIT license. See LICENSE for details.","tagline":"A fast, tiny hybrid mocking library.","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}